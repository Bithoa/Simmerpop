from ... import global_variables
from ... import population_manager
from ... import analytics
from . import cd_energy_io
import random
import os

__author__ = 'Yuta A. Takagi'

# this energy In/Out is designed for Yuta's model
#
# it maintains a pool of loose energy parcels outside of organisms. energy parcels can passively move in and out of
# organisms from this pool if the organism has a low cellularity value


# ====================================================================================================
# ****************************************************************************************************


# ****************************************************************************************************
# ====================================================================================================


class EnergyIO(cd_energy_io.EnergyIO):  # this class name cannot be altered. Leave as 'EnergyIO'
    def __init__(self):

        if not global_variables.RUN_SAVED:
            self.loose_energy_parcels = []
        else:
            # load save line
            save_file = open(os.path.join(analytics.OUTPUT_DIRECTORY, 'save_points.txt'), 'r')
            for line in save_file:
                save_line = line
            saved_params = save_line.split('\t')
            if saved_params[3] == '[]':
                self.loose_energy_parcels = []
            else:
                self.loose_energy_parcels = \
                    [float(energy_parcel_as_string)
                     for energy_parcel_as_string in saved_params[3].strip().strip('[]').split(', ')]

    def get_energy(self, organism):
        temp = len(self.loose_energy_parcels)
        if temp > 0:  # if energy is gained
            return self.loose_energy_parcels.pop(random.randint(0, temp - 1))
        else:
            return 0

    def discard_energy(self, organism):
        # returns a random amount of energy up to half of the organism's energy stock
        maximum = organism.energy / 2
        to_lose = maximum*random.random()
        self.loose_energy_parcels.append(to_lose)
        return to_lose

 
