from . import cd_food_io
from ..food_types import food_type_not
from ... import population_manager
import random

__author__ = 'Yuta A. Takagi (2016) & Diep Nguyen (2018)'


# this food In/Out is designed for Yuta's model and utilizes the following food types:
# FoodNot
#
# it provides a 'FoodNot' food every time an organism requests a food


# ====================================================================================================
# ****************************************************************************************************
global food_pool
food_pool = []
FOOD_ADD_RATE = 100


# ****************************************************************************************************
# ====================================================================================================


class FoodIO(cd_food_io.FoodIO):  # this class name cannot be altered. Leave as 'FoodIO'    
    def make_food_pool():
        for i in range(population_manager.START_POPULATION):
            currFood = food_type_not.FoodNot()
            food_pool.append(currFood)
            
    def add_food():
        NUM_FOOD_ADD = FOOD_ADD_RATE
        for i in range(NUM_FOOD_ADD):
            currFood = food_type_not.FoodNot()
            food_pool.append(currFood)      
        
    def get_food(self):
        if len(food_pool) == 0:
            return None
        else:
            num = random.randint(0, len(food_pool)-1)
            return food_pool.pop(num)        
    
    def get_test_food(self):
        return food_type_not.FoodNot()

    def discard_food(self, food_to_discard):
        if food_to_discard.spent == True:
            pass
        else:
            food_pool.append(food_to_discard)

    def init_food_from_string_repr(self, string_repr):
        repr_params = string_repr.split('_')
        to_return = None
        if repr_params[0] == 'FoodNot':
            to_return = food_type_not.FoodNot()
            to_return.inputs = [input_as_string == 'True' for input_as_string in repr_params[1].strip('[]').split(', ')]
            to_return.solution = \
                [None if solution_as_string == 'None' else solution_as_string == 'True'
                 for solution_as_string in repr_params[2].strip('[]').split(', ')]
        return to_return
